#!/usr/bin/env bash

# This is a bash utility to help install, backup, restore app data on ur phone.
# Version:2.9
# Author: Prasad Tengse
# Licence: MIT
# Github Repository: https://github.com/tprasadtp/minchu
# Requirements - Bash v4.4 and above
#              - Android 5.1 and above.
#              - latest version of adb and fastboot installed properly and are in your $PATH.
#              - udev rules are properly set for your device/manufacturer.
#              - ADB debugging enabled and your pc is trusted. (duh!)
#              - Assumes that only one adb device is connected to the PC. Which holds true most of the time.
#                Its okay if you have multiple devices connected (including emulators),
#                but dont enable adb on multiple devicees.
#              - Windows Subsystem for Linux is untested and un-verified.
#              - NOTE: Even though I have checked backup functions,
#                I have not verified the restore operations with backups screated using this script.
#              - Have common sense.
#
# ------------------------------------------------------------------------------

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Changelogs~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# v1.0      - Batch install, grant permissions
# v2.0      - Major rewrite, Command line arguments, check device connections, modularize components.
# v2.1      - Backup and restore functions, Wait for device to be connected if its not connected.
# v2.2      - OTA sideload, device info, Make variables suck less and tidy up code here and there.
# v2.3      - Simplified and streamlined granting permissions by modifying set_permissions_cmd,
#             to perform app checks and removed redundant functions.
# v2.4      - Fixs  variables in device check function, Fix several typos.
#             Added betterbatterystats playstore edition
#           - Ability to see version info for script. {Just to keep track of it}
# v2.5      - Improved script, small bug fixes and better shellcheck (Still Printf varibles in quotes is ignored)
# v2.6      - ADB Wireless, Added more packages to permissions (Naptime and Quick settings)
#           - Added option to launch Brevent, Clear Substratum app data, enable adb wireless modes
# v2.7      - Added Ability to disable and unistall theme overlays for android Oreo (will not work on 7.1.2 or below versions)
#           - Disable and Unistall Systemui, Settigns and android overlays
# V2.8      - Option to Uninstall overlays by theme name
#           - fixed a bug where only one overlay was being un-installed
# v2.9      - Enable Substratum Andromeda server
# TODO
# 1 [-]   - Make certain arguments optional using getopt [OTA] [APK, BACKUP DIRECTORY]
#           It makes things more complex/forces use of external tools/some non standard functions
#           makes drop certain features (--long args). {WONTFIX}
# 2 [ ]   - Prioritize --ota command so that it will igonre all the other flags are arguments.
#           There are several reasons for this. Because it leaves android and reboots to recovery,
#           Might require PIN on Startup, unpredictable state of the device upon reboot,
#           adb wait-for-device not available, might require manual reboot etc.
#          Moreover, its easy to automate it if necessary, with a secondary script wih two lines of code.
# 3 [-]   - Better parse the commands (allow soft fails)
# 4 [ ]   - Individual app backups/restore
# 5 [ ]   - Factory Image restore option [fastboot required]
# 6 [ ]   - Allow packages to be downgraded
# 7 [x]   - Make it work reliably via TCP (Adb over Network)
# ------------------------------------------------------------------------------

#Variables

DATE=$(date +%Y-%m-%d:%H:%M:%S)
SCRIPT=$(basename "$0")
VERSION="2.9 Beta"


#Package names
GREENIFY=com.oasisfeng.greenify
MONOCHROME=com.suyashsrijan.lowbatterymonochrome
#WAKELOCK_DETECTOR=com.uzumapps.wakelockdetector
GSAM_BATTERY=com.gsamlabs.bbm
GSAM_BATTERY_PRO=com.gsamlabs.bbm.pro
BETTER_BATTERY_STATS=com.asksven.betterbatterystats_xdaedition
BETTER_BATTERY_STATS_NXDA=com.asksven.betterbatterystats
FORCE_DOZE=com.suyashsrijan.forcedoze
SYSTEMUI_TUNER=xyz.paphonb.systemuituner
NOUGAT_QUICKSETTINS=it.simonesestito.ntiles
SUBSTRATUM=projekt.substratum
BREVENT=me.piebridge.brevent
NAPTIME=com.franco.doze
ANDROMEDA=projekt.andromeda


#Package whitelist for overlays
# these will not be unistalled/disabled during overlay unistallation
WHITELIST_OVERLY[0]=android.autoinstalls.config.google.nexus # Not an overlay
WHITELIST_OVERLY[1]=com.android.systemui.navbars.Navbars.S8  # Nav bar overlay
WHITELIST_OVERLY[2]=com.google.android.theme.pixel #Pixel theme (Not compiled from substratum so leave it)

#Other Constants
ANDROID_IP=192.168.0.101
PORT=7667
MORE_THAN_ONE_DEVICE="error: more than one device/emulator"
NO_DEVICE_FOUND="error: no devices/emulators found"
NO_DEVICE_CONNECTED="List of devices attached"

#DOTFILE_DIR="Dotfiles"


#Android Permissions
PERMISSION_BATTERY_STATS=android.permission.BATTERY_STATS
PERMISSION_DUMP=android.permission.DUMP
PERMISSION_LOGS=android.permission.READ_LOGS
PERMISSION_SECURE_SETTINGS=android.permission.WRITE_SECURE_SETTINGS

#COLORS and Data for Printf
#ORANGE=$(tput setaf 9)
YELLOW=$(tput setaf 3)
DEEP_BLUE=$(tput setaf 4)
BLUE=$(tput setaf 6)
#RED=$(tput setaf 9)
GREEN=$(tput setaf 46)
WHITE=$(tput setaf 255)
NC=$(tput sgr 0)
WIDTH=$(tput cols)

function line_fill()
{
  # Function simply draws a line accross width of the terminal for a given color
  # Input: Variable defining color in format $(tput setaf <number)
  # If input argument is empty it reverts to a default color of Yellow.
  if [ $# -eq 0 ]; then
    local fill_color=${YELLOW}
  else
    local fill_color=${1}
  fi
  printf "${fill_color}%-${WIDTH}s@%s${NC}\n" | sed -e 's/ /-/g' -e 's/-@/ /' -e 's/@-/ /'
}

#Functions
function usage()
{
#Prints out help menu

echo "Usage: ${YELLOW}${SCRIPT}${NC}\
     [options]
  [-a  --apk]         [Batch install all the apk files found in current folder]
  [-ar --after-reboot][Perform after reboot items]
  [-b  --backup]      [Backup app-data]
  [-br --brevent]     [Enable brevent Server on phone]
  [-cs --clear-sub]   [Clear Substratum App Data]
  [-i  --info]        [Check if device is connected & if yes, give its details]
  [-o  --ota]         [Sideload OTA ZIP and exit]
  [-p  --permissions] [Grant special permissions via adb for cetrain apps]
  [-r  --restore]     [Restore app data in .ab files in current folder]
  [-w  --wireless]    [connect to adb wirelessly]
  [-we --wl-enable]   [Enable adb wireless on device]
  ${YELLOW}
  -------------------- ANDROID 8.0 & ABOVE ONLY -------------------
  ${NC}
  [-s  --substratum]  [Enable Andromeda add-on server for Substratum]
  [-t  --theme]       [List Overlays and enter adb shell  to choose overlays]
  [-uso]              [Unistall Overlays belonging to SystemUI, Settings
                       and Android]
  [-ut <theme name>]  [Uninstall theme]
  ${YELLOW}
  -------------------- HELP & VERSION INFO ------------------------
  ${NC}
  [-h --help]         [Display this message]
  [-v --version]      [Display script verion and exit]"
printf "\nNotice any bugs? Please report it. \
You are welcome to create a pull request on Github, if you can make it better in any way!"
printf "\n${YELLOW}Github Repository : ${BLUE}https://github.com/tprasadtp/minchu${NC}\n";

line_fill;
}

function display_version()
{
  line_fill "${BLUE}"
  printf "%+11s ${YELLOW} ${SCRIPT} ${NC}\n%+11s ${YELLOW} ${VERSION} ${NC}\n" "Executable:" "Version:";
  line_fill "${BLUE}"
}


function check_if_installed()
{
  #Function checks if the apps is installed on the device.
  #Input arguments : <package name>  eg. com.spotify.music for Spotify
  #Returns: Sets a global boolean bool_is_installed <true/false>
  bool_is_installed=false #reset Variable
	if adb shell pm list packages | grep -qFx package:"${1}"; then
    		printf "%-30s: %+9s\n" "${1}" "${BLUE}INSTALLED${NC}"
		bool_is_installed=true
  else
    		printf "%-30s: %+9s\n" "${1}" "${YELLOW}NOT FOUND${NC}"
		bool_is_installed=false
	fi
}


function device_init()
{
  #Function that waits for adb and shouts what is connected
  #Also checks if multiple devices are connected and if true, exits the script
  #Input:None Output: Device details if connected
  local adb_found #Output of adb
  local adb_multidev_check #Output of adb shell if multiple devices are connected gives an error
  local device_name #name of the device
  adb_found=$(adb devices | tail -2 | head -1 | cut -f 1 | sed 's/ *$//g')
  line_fill;
  # Check if no devices are connected, if true, wait for device
  if [ "${adb_found}" == "${NO_DEVICE_CONNECTED}" ]; then
    printf "No Android Devices/Emulators found. Have you enabled ADB on your device?\n"
    printf "${BLUE}Waiting for Device...${NC}\n"
    adb wait-for-device
  fi
  #Check if multiple devices are connected if true, exit the script
  adb_multidev_check=$(adb shell getprop ro.product.model 2>&1)
  if [ "$adb_multidev_check" == "$MORE_THAN_ONE_DEVICE" ]; then
      printf "${YELLOW}ERROR: More than one device or emulator is connected!\n${NC}Script cannot continue!!\n"
      exit 1;
  elif [ "$adb_multidev_check" == "$NO_DEVICE_FOUND" ];then
    printf "No Android Devices/Emulators found. Have you enabled ADB on your device?\n"
    printf "${BLUE}Waiting for Device...${NC}\n"
    adb wait-for-device
  fi
  device_name=$(adb shell getprop ro.product.model)
	printf "${device_name} is Connected!\n"
  line_fill;
}

function check_sdk()
{
  #Function to  Check if SDK version is between the specified versions
  #Arguments: Two integers with min and max sdk numbers respectively in that order.
  #Should be used after device_init function to avoid conflicts/errors with multiple devices
  #ARG1:min_sdk_version (required)
  #ARG2:max_sdk_version (optional)
  #Output Exit the script if ro.build.version.sdk  is not within bounds specified
  #NOTE: THIS CHECK WILL FAIL FOR ANDROID PREVIEW RELEASES WHICH HAVE SDK VERSION IN LETTERS
  local min_sdk_version="$1"
  local max_sdk_version="$2"
  local device_sdk_version
  if [ $# -eq 0 ]; then
    printf "Error Not enough arguments to check SDK bounds\n"
    exit 500;
  fi

  device_sdk_version=$(adb shell getprop ro.build.version.sdk)
  #If only one argument is specified its min sdk version
  if [ $# -eq 1 ]; then
    #check for min sdk
    if [ "$device_sdk_version" -lt "$min_sdk_version" ]
     then
      printf "${YELLOW}ERROR : Your Device does not support this feature.\n${NC}"
      exit 403;
    fi
  #If two arguments are specified then check for max sdk as well
  elif [ $# -eq 2 ]; then
    #check for min and max sdk
    if [ "$device_sdk_version" -lt "$min_sdk_version" ] || [ "$device_sdk_version" -gt "$max_sdk_version" ]
     then
      printf "${YELLOW}ERROR : Your Drevice does not support the required feature\n${NC}"
      exit 403;
    fi
  fi

}

function device_check()
{
  #Function to check if device is connected and get its detsils if connected
  #Input: None
  #Output: Device name, model, serial number and other details
  #Expects: single adb device or none to be connected.
    device_init;
    local device_name
    device_name=$(adb shell getprop ro.product.model)
    printf "${YELLOW}Properties for connected ${device_name}:\n${NC}"
    adb shell getprop | grep "model\|version.sdk\|manufacturer\|hardware\|platform\|revision\|serialno\|product.name\|brand\|bootloader\|ro.vendor.build.fingerprint\|ro.vendor.build.date\|sys.oem_unlock_allowed"
    line_fill;
}

function restore_app_data()
{
  #Function to restore app dat in .ab files
  #Input: None
  #Expects: adb backup file(s) with .ab extension to be in current directory.
  printf "\nYou need to manually accept the prompt on device and enter the encryption password if any for it to work.\n"
  printf "\n${BLUE}Restoring ADB data...${NC}"
  #count_files=$(ls -l | grep -v ^d | wc -l) #parsing LS is not adviced So dropping it.

  #count .ab adb backup files in the current directory.
  #https://askubuntu.com/questions/454564/count-total-number-of-files-in-particular-directory-with-specific-extension
  local count_files
  count_files=$(find . -maxdepth 1 -type f -name "*.ab" -exec printf x \; | wc -c)
  #count_files=`expr $count_files - 1`
  printf "${DEEP_BLUE}$count_files ${NC}adb backup files Found."

  if [[ $count_files = "0" ]]; then
    printf "${YELLOW}No backup files found.\n${NC}"

    line_fill;
    return 1;
  fi

  device_init;

  local index=1
  for file in *.ab;
  do
     printf "\nRestoring app data %d : ${BLUE}%s${NC}\n" "$index" "${file}"
     adb wait-for-device
     adb restore "${file}"
     index=$((index + 1))
  done
  line_fill;
  return 0;

}


function apk_batch_install()
{
  #This functions installs apks found in current directory no arguments are accepted.
  #Expects: APK files are in current directory.

	printf "${BLUE}Batch Installing APKs...${NC}\n"
	local count_files
  count_files=$(find . -maxdepth 1 -type f -name "*.apk" -exec printf x \; | wc -c)
	printf "${BLUE}$count_files${NC} APK files Found\n"

  if [[ $count_files = "0" ]]; then
    printf "${YELLOW}No APK files found.\n${NC}"
    line_fill;
    return 1;
  fi

  #Check if device is connected.
	device_init;

	local index=1
	for file in *.apk;
	do
		printf "\nInstalling APK $index : ${BLUE}${file}${NC}: "
		adb wait-for-device
		adb install -r "${file}"
		index=$((index + 1))
	done
	unset index count_files
  line_fill;
  return 0;
}


function set_permissions_cmd()
{
	#Function Accepts argument 1 as package name and argument 2 the APP_NAME to be displayed,
  #and further arguments as permissions which are variables,
  #defined or explicitly mentioned package names or standard android permissions and
  #grants them via adb.
  #Example: set_permissions_cmd ${GREENIFY} "Greenify" ${PERMISSION_DUMP} ${PERMISSION_LOGS}.

  local permissions_arg
  local PACKAGE_NAME="${1}"
  local APP_NAME="${2}"
  shift 2;
  check_if_installed "${PACKAGE_NAME}"
  if [ "$bool_is_installed" == "true" ]
      then
      printf "\n%-50s: %-30s\n" "Granting Permissions to" "${YELLOW}${APP_NAME}${NC}"
      for permissions_arg in "$@"
        do
              #printf "\nGranting %s" "${permissions_arg}" #DEBUG
              adb shell pm grant "${PACKAGE_NAME}" "${permissions_arg}"
      done
  fi
  unset bool_is_installed;

}


function grant_permissions_to_apps()
{
  printf "${YELLOW}Granting Special Permissions to apps...${NC}\n"
  #Check if device is connected.
  device_init;
  #Function calls to set_permissions_cmd to grand permissions to required arguments.
  #Arguments: None Output: None.
  #Just a wrapper function.
  set_permissions_cmd ${GREENIFY} "Greenify" ${PERMISSION_LOGS} ${PERMISSION_DUMP} ${PERMISSION_SECURE_SETTINGS};
  set_permissions_cmd ${MONOCHROME} "Monochrome" ${PERMISSION_SECURE_SETTINGS};
  set_permissions_cmd ${GSAM_BATTERY} "Gsam_Battery Monitor" ${PERMISSION_BATTERY_STATS};
  set_permissions_cmd ${GSAM_BATTERY_PRO} "Gsam Battery Monitor Pro" ${PERMISSION_BATTERY_STATS};
  set_permissions_cmd ${BETTER_BATTERY_STATS} "Better Battery Stats (XDA)" ${PERMISSION_BATTERY_STATS};
  set_permissions_cmd ${BETTER_BATTERY_STATS_NXDA} "Better Battery Stats (Play Store)" ${PERMISSION_BATTERY_STATS};
  set_permissions_cmd ${FORCE_DOZE} "Force Doze" ${PERMISSION_DUMP} ${PERMISSION_SECURE_SETTINGS};
  set_permissions_cmd ${SYSTEMUI_TUNER} "System UI Tuner" ${PERMISSION_SECURE_SETTINGS};
  set_permissions_cmd ${NOUGAT_QUICKSETTINS} "Nougat Quick Settings" ${PERMISSION_SECURE_SETTINGS};
  set_permissions_cmd ${NAPTIME} "Naptime Doze" ${PERMISSION_DUMP} ${PERMISSION_SECURE_SETTINGS}
  #printf "\n${YELLOW}%-${WIDTH}s@%s\n${NC}" | sed -e 's/ /-/g' -e 's/-@/ /' -e 's/@-/ /'
  line_fill;
  return 0;
}




function backup_all()
{
  #Function to backup all app data, apks.
  #Expects: Nothing but disk space and a device.
  #check if device is connected.
	device_init

  printf "\n${YELLOW}Backing up App data, APKs in current directory...${NC}\n"
	adb backup -apk -all -nosystem -f "ADB-BACKUP-${DEVICE_NAME}-${DATE}.ab"
  line_fill;
  return 0;
}


function ota_sideload()
{
  #Function to update the device using latest OTA ZIP via adb sideload.
  #Expects: Single valid ".zip" file for OTA in current directory.
  #Expects: Android device is already compatible with the OTA ZIP.
  #Expects: User to manually enter sideload mode after rebooting to recovery.
  #Expects: User to reboot manually after sideloading.
  #Input: [None] [In future Optional argument OTA ZIP Filename]

  line_fill;
  printf "\n${NC}Make sure that zip file and only the right zip file is in same folder as this script or your current folder and it doesn't have any additional zip files."
  #check if a single ota file is present
  local count_files;
  count_files=$(find . -maxdepth 1 -type f -name "*.zip" -exec printf x \; | wc -c)
  if [[ "$count_files" -gt "1" ]]; then
    printf "\n${YELLOW}Multiple Zip files found. Cannot continue with sideload operation.\n${NC}"
    return 1;
  elif [[ $count_files = "0" ]]; then
    printf "\n${YELLOW}No Zip file found. Cannot proceed with sideload operation.\n${NC}"
    return 1;
  else
    device_init;
    printf "\n${YELLOW}Rebooting to sideload mode...\n${NC}"
    adb reboot recovery
    sleep 10
    printf "\nPlease Enter sideload mode on your device.\n"
    while true; do
        read -r "Have you entered sideload mode? Press N to Exit. (Y/N)" yn
        case $yn in
            # # shellcheck disable=SC2035
            [Yy]* ) adb sideload ./*.zip && printf "\nSideloaded OTA ZIP.";break;;
            [Nn]* ) break;;
        esac
    done
    printf "${YELLOW}\nPlease Reboot your device.\n"
  fi
  line_fill;
  return 0;
}

function clear_data_subs()
{
  device_init;
  check_if_installed "${SUBSTRATUM}"
  if [[ "$bool_is_installed" == "true" ]]
      then
      printf "\n%-50s: %-30s" "Clearing App Data" "${YELLOW}Substratum${NC}"
        adb shell pm clear ${SUBSTRATUM}
  fi
  unset bool_is_installed;

}


function theme_mode()
{
  device_init;
  adb shell cmd overlay list
  adb shell
}


function enable_brevent()
{
  # Enable brevent server on phone
  device_init;
  printf "${BLUE}Enabling Brevent${NC}\n"
  unset bool_is_installed;
  check_if_installed "${BREVENT}"
  if [ "$bool_is_installed" == "true" ]; then
      printf "\n${BLUE}Enabling Brevent Server....\n${NC}"
      adb shell sh /data/data/${BREVENT}/brevent.sh
      printf "\n${BLUE}Enjoy Brevent on your device\n${NC}"
  else
    printf "\n${YELLOW}Brevent is not Installed${NC}\n"
  fi
  unset bool_is_installed;
  line_fill;
}


function adb_wireless()
{
  #connect adb wireless on phone
  local adb_connect_result
  adb_connect_result=$(adb connect ${ANDROID_IP}:${PORT} | cut -f 1 -d " "  2>&1 )
  #echo $adb_connect_res
  if [ "${adb_connect_result}" == "connected" ]; then
    printf "${BLUE}Connected to device at ${ANDROID_IP} on port ${PORT}\n${NC}"
  elif [ "${adb_connect_result}" == "already" ]; then
    printf "${BLUE}Already connected to device at ${ANDROID_IP} on port ${PORT}\n${NC}"
  else
    printf "${BLUE}ERROR: Failed to connect to device at ${ANDROID_IP} on port ${PORT}\n${NC}"
    exit 1; #exit if cannot connect
  fi

}

function adb_wireless_enable()
{
  #enable adb wireless on phone
  device_init;
  adb -d tcpip 7667;
  adb disconnect;
  adb_wireless;
  printf "Please disconnect the USB cable to avoid conflicts.\n"
  line_fill;
}

function adb_disconnect()
{
  #To disconnect from the adb device_init
  adb disconnect;
}

function uninstall_system_overlays()
{
  # To uninstall all the system overlays and disable them.except whitelisted ones
  # Packages with android, com.android.systemui, com.android.settings will be disabled and unisntalled
  # List installed overlays and write ato a tmp directory and unistall them
  # Systemui
   device_init;
   check_sdk "26" "26"
   mkdir -p /tmp/overlay-list
   adb shell pm list packages | grep  package:com.android.systemui. | cut -d ":" -f 2 > /tmp/overlay-list/systemui-overlay.txt
   uninstall_ovelays_by_package "/tmp/overlay-list/systemui-overlay.txt" "SYSTEMUI"
   # Android
   adb shell pm list packages | grep  package:android. | cut -d ":" -f 2 > /tmp/overlay-list/android-overlay.txt
   uninstall_ovelays_by_package "/tmp/overlay-list/android-overlay.txt" "ANDROID"
   # Settings
   adb shell pm list packages | grep  package:com.android.settings. | cut -d ":" -f 2 > /tmp/overlay-list/settings-overlay.txt
   uninstall_ovelays_by_package "/tmp/overlay-list/settings-overlay.txt" "SETTINGS"
   #rm -rf /tmp/overlay-list/

}

function uninstall_overlays_by_theme()
{
  # Function to unistall a package by a theme name
  # Theme name should be in package name
  # Must have a single argument with theme name ti be passed
  # Input: Theme name as it appears in package name Eg: In com.android.systemui.CompactUI
  # CompactUI Should be argument. (case sensitive)
  # Output: none
  local theme_name=${1}
  device_init
  check_sdk "26" "26"
  if [ "${theme_name}" == "" ]; then
          printf "${BLUE}Not enough arguments found. \n${NC}"
          line_fill;
  		    exit 1;
  fi;
  local unistall_list="/tmp/overlay-list/unistall.txt"
  adb shell pm list packages | grep "${theme_name}" | cut -d ":" -f 2 >${unistall_list}
  cat ${unistall_list}
  uninstall_ovelays_by_package "${unistall_list}" "${theme_name}"
}

function uninstall_ovelays_by_package()
{
  # Unistall overlays starting/intended for a certain package using the files created by uninstall_system_overlays function
  # Accepts : two arguments
  # First: file with list containing the overlays
  # Second: Name describing to which type the overlays belong to
  local file_list=${1}
  local overlay_type=${2}
  local is_whitelisted=false
  local line;
  if [ -e "${file_list}" ]; then
    printf "Disabling and Unistalling ${overlay_type} Overlays.....${NC}\n"
    line_fill "${WHITE}";
    #read every line from file, disable and unistall it
    while IFS= read -r line
      do
          # Reset the flag
          is_whitelisted=false
          for whitelist_item in "${WHITELIST_OVERLY[@]}"
          do
            if [ "${line}" = "$whitelist_item" ]; then
            #  if WHITELISTED set the flag
             # printf "${line} is WHITELISTED\n"
             is_whitelisted=true
             break
            fi
          done
          if [ "${is_whitelisted}" = true ] ; then
            printf "${GREEN}WHITELISTED:${NC}${line}\n"
            continue
          fi
          #adb shell cmd overlay disable "${line}"
          printf "Uninstalling: %s\n" "$line"
          adb uninstall "$line"
          #unistall_single_overlay_package "${line}"
      done < "$file_list"
      line_fill "${WHITE}";
  else
    printf "ERROR: Config file ${file_list} is missing!\n"
    line_fill "${WHITE}";
    exit 1;
  fi

}

function after_reboot_items()
{
  local yn
  adb_disconnect;
  adb_wireless_enable;
  while true; do
    read -n 1 -r -p "Have you disconnected the USB cable?" yn
    case $yn in
    [Yy]* )  echo ""; adb_disconnect; adb_wireless; enable_brevent;enable_substratum_andromeda;break;;
    esac
  done
}

function enable_substratum_andromeda()
{
  #Function to start andromeda server on device
  #Input arguments: None Output: None.
  #Credits:[projekt.] development team
  local package_path # path where andromeda is installed
  local kill_list # processes to be kiled (if server is already running)
  device_init;
  unset bool_is_installed; #clear the variable
  printf "${BLUE}Andromeda Start Shell Script${NC}\n"
  line_fill;
  check_sdk "26" "26"
  printf "Checking if Andromeda app is installed.....\n"
  check_if_installed "${ANDROMEDA}"
  #bool_is_installed=false #testing only
  if [ "$bool_is_installed" == "true" ]; then
      package_path=$(adb shell pm path projekt.andromeda | cut -d : -f 2 | sed s/\\r//g)
      kill_list=$(adb shell pidof andromeda-server)
      # Check if we need to kill the existing pids, then kill them if needed
      if [[ "${kill_list}" = "" ]]; then
        printf "Granting permissions to run in Background\n"
        adb shell am force-stop projekt.substratum
        adb shell appops set "${ANDROMEDA}" RUN_IN_BACKGROUND allow
        adb shell appops set "${SUBSTRATUM}" RUN_IN_BACKGROUND allow
        adb shell CLASSPATH="${package_path}" app_process /system/bin --nice-name=andromeda-server projekt.andromeda.Andromeda &
      else
        adb shell am force-stop projekt.substratum
        adb shell kill -9 "${kill_list}"
        adb shell appops set "${ANDROMEDA}" RUN_IN_BACKGROUND allow
        adb shell appops set "${SUBSTRATUM}" RUN_IN_BACKGROUND allow
        adb shell CLASSPATH="${package_path}" app_process /system/bin --nice-name=andromeda-server projekt.andromeda.Andromeda &
      fi
      adb kill-server 2>&1;
      printf "${BLUE}Enjoy Substratum+Andromeda on your device\n${NC}"
  else
    printf "${YELLOW}Opps! Andromeda is not Installed${NC}\nPlease visit:${BLUE} https://play.google.com/store/apps/details?id=projekt.andromeda ${NC}to install Andromeda.\n"
  fi
  unset bool_is_installed;
  line_fill;
}

function main()
{
  #check if no args
  if [ $# -eq 0 ]; then
          printf "\n${BLUE}No arguments found. See usage below.\n${NC}"
          line_fill;
          usage;
  		    exit 1;
  fi;

# check for adb
  if [ "$(which adb)" == "" ]; then
    printf "\n${YELLOW}No adb binaries found in system path.\n This Script cannot continue\n${NC}"
    exit 2;
  fi

  #welcome;
  # Process command line arguments.
  while [ "$1" != "" ]; do
      case ${1} in
          -p | --permissions )    grant_permissions_to_apps;
                                  ;;
          -r | --restore )        restore_app_data;
                                  ;;
  		    -a | --apk )  			    apk_batch_install;
                                  ;;
          -i | --info )  			    device_check;
                                  exit 0
                                  ;;
  		    -b | --backup )			    backup_all;
  								                ;;
          -o | --ota )            ota_sideload;
                                  exit 0;
                                  ;;
          -h |--help )            usage;
                                  exit 0;
                                  ;;
          -v | --version)         display_version;
                                  exit 0;
                                  ;;
  		   -bhairavi | --bhairavi)  printf "${DEEP_BLUE}\nHi Bhairavi! Nice to meet you! I was written on Sindhu and she said Hello!${NC}\n";
  								                usage;
                                  exit 12
                                  ;;
        -cs | --clear-sub)        clear_data_subs;
                                  ;;
         -t | --theme)            theme_mode;
                                  ;;
        -br | --brevent)          enable_brevent;
                                  ;;
        -w  | --wireless)         adb_wireless;
                                  ;;
       -we  | --wireless-enable)  adb_wireless_enable;
                                  exit 0;
                                  ;;
       -dis | --disconnect)       adb_disconnect;
                                  exit 0;
                                  ;;
      -uso | --unistall-overlays) uninstall_system_overlays;
                                  ;;
       -ut | --unistall-theme)    shift
                                  uninstall_overlays_by_theme "${1}";
                                  exit 0;
                                  ;;
       -ar | --after-reboot)      after_reboot_items;
                                  ;;
        -s | --substratum)        enable_substratum_andromeda;
                                  ;;
          * )                     printf "\n${YELLOW}Invalid argument(s). See usage below.${NC}\n"
                                  usage;
                                  exit 1;
                                  ;;
      esac
  	shift
  done
}
#
main "$@"
